{"version":3,"sources":["webpack:///./src/components/global/slideshow.js","webpack:///./src/templates/project-post.js"],"names":["SlideShow","images","React","useState","index","setIndex","useEffect","currentInterval","setInterval","length","clearInterval","nav","isFilled","idx","push","key","onClick","setImage","className","aria-hidden","height","width","cx","cy","r","stroke","fill","entries","Fragment","fluid","node","childImageSharp","alt","base","split","fadeIn","ProjectPost","data","markdownRemark","frontmatter","date","title","technologies","website","mainColor","html","allFile","edges","paintDrip","to","hex","map","technology","href","target","rel","dangerouslySetInnerHTML","__html","query"],"mappings":"ikCAGA,IA6DeA,EA7DG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACNC,IAAMC,SAAS,GAAlCC,EADyB,KAClBC,EADkB,KAGhCH,IAAMI,WAAU,WACd,IAIMC,EAAkBC,aAJE,WAExBH,GAAUD,EAAQ,GAAKH,EAAOQ,UAEuB,KAEvD,OAAO,kBAAMC,cAAcH,MAC1B,CAACH,EAAOH,IAoBX,IAlBA,IAkBA,EAlBMU,EAAM,GAboB,iBAenBC,EAgBHC,EA/BsB,WAgC9BF,EAAIG,KACF,yBACEC,IAAKF,EACLG,QAAS,kBARE,SAAAH,GACfR,EAASQ,GAOUI,CAASJ,IACxBK,UAAU,iBACVC,cAAY,SAtBLP,EAwBCC,IAAQT,EAvBpB,yBAAKgB,OAAO,KAAKC,MAAM,MACrB,4BACEC,GAAG,KACHC,GAAG,KACHC,EAAE,MACFC,OAAO,yBACPC,KAAMd,EAAW,yBAA2B,cASlD,IAAkBX,EAAO0B,aAAzB,aAAqC,IAarC,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKV,UAAU,aACb,kBAAC,IAAD,CACEW,MAAO5B,EAAOG,GAAO0B,KAAKC,gBAAgBF,MAC1CG,IAAK/B,EAAOG,GAAO0B,KAAKG,KAAKC,MAAM,KAAK,GACxChB,UAAU,oBACViB,QAAQ,IAEV,yBAAKjB,UAAU,oCACb,yBAAKA,UAAU,wBAAwBP,OCnDlC,SAASyB,EAAT,GAAgC,IAATC,EAAQ,EAARA,KAAQ,EAOxCA,EALFC,eAF0C,IAGxCC,YAAeC,EAHyB,EAGzBA,KAAMC,EAHmB,EAGnBA,MAAOC,EAHY,EAGZA,aAAcC,EAHF,EAGEA,QAASC,EAHX,EAGWA,UACnDC,EAJwC,EAIxCA,KAEgB5C,EAChBoC,EADFS,QAAWC,MAGb,OACE,kBAAC,IAAD,KACE,yBAAK7B,UAAU,yBACb,yBAAKA,UAAU,yBACb,kBAAC,IAAD,CAAS8B,WAAS,EAACC,GAAG,IAAIC,IAAKN,GAA/B,kBAGA,uBAAG1B,UAAU,iBAAiBsB,IAEhC,yBAAKtB,UAAU,oBACb,4BAAKuB,GACL,6BACA,uBAAGvB,UAAU,8BACVwB,EAAaS,KAAI,SAACC,EAAYhD,GAAb,OAChB,0BAAMW,IAAKX,GACR,IACAA,EAAQ,GAAK,iCAFhB,IAEmCgD,OAIvC,6BACA,uBAAGC,KAAMV,EAASW,OAAO,SAASC,IAAI,uBACnCZ,IAGJ1C,EAAOQ,OAAS,GAAK,kBAAC,EAAD,CAAWR,OAAQA,IAEzC,yBAAKiB,UAAU,mBACb,yBAAKsC,wBAAyB,CAAEC,OAAQZ,QAO3C,IAAMa,EAAK","file":"component---src-templates-project-post-js-c180d1b630609fcfb700.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\n\nconst SlideShow = ({ images }) => {\n  const [index, setIndex] = React.useState(0)\n\n  React.useEffect(() => {\n    const slideshowFunction = () => {\n      // round robin\n      setIndex((index + 1) % images.length)\n    }\n    const currentInterval = setInterval(slideshowFunction, 8000)\n\n    return () => clearInterval(currentInterval)\n  }, [index, images])\n\n  const nav = []\n\n  let circle = isFilled => (\n    <svg height=\"20\" width=\"20\">\n      <circle\n        cx=\"10\"\n        cy=\"11\"\n        r=\"3.5\"\n        stroke=\"var(--color-black-700)\"\n        fill={isFilled ? \"var(--color-black-700)\" : \"none\"}\n      />\n    </svg>\n  )\n\n  const setImage = idx => {\n    setIndex(idx)\n  }\n\n  for (let [idx] of images.entries()) {\n    nav.push(\n      <div\n        key={idx}\n        onClick={() => setImage(idx)}\n        className=\"cursor-pointer\"\n        aria-hidden=\"true\"\n      >\n        {circle(idx === index)}\n      </div>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"slideshow\">\n        <Img\n          fluid={images[index].node.childImageSharp.fluid}\n          alt={images[index].node.base.split(\".\")[0]}\n          className=\"rounded-md center\"\n          fadeIn={true}\n        />\n        <div className=\"position-absolute slideshow__nav\">\n          <div className=\"slideshow__nav--flex\">{nav}</div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default SlideShow\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\nimport SlideShow from \"../components/global/slideshow\"\n\nexport default function ProjectPost({ data }) {\n  const {\n    markdownRemark: {\n      frontmatter: { date, title, technologies, website, mainColor },\n      html,\n    },\n    allFile: { edges: images },\n  } = data\n\n  return (\n    <Layout>\n      <div className=\"project-post__wrapper\">\n        <div className=\"project-post__top-bar\">\n          <AniLink paintDrip to=\"/\" hex={mainColor}>\n            &#8249; Back to home\n          </AniLink>\n          <p className=\"font-semibold\">{date}</p>\n        </div>\n        <div className=\"mb-3 text-center\">\n          <h3>{title}</h3>\n          <br />\n          <p className=\"project-post__technologies\">\n            {technologies.map((technology, index) => (\n              <span key={index}>\n                {\" \"}\n                {index > 0 && <em>&#8226;</em>} {technology}\n              </span>\n            ))}\n          </p>\n          <br />\n          <a href={website} target=\"_blank\" rel=\"noopener noreferrer\">\n            {website}\n          </a>\n        </div>\n        {images.length > 0 && <SlideShow images={images} />}\n\n        <div className=\"mt-3 text-block\">\n          <div dangerouslySetInnerHTML={{ __html: html }} />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!, $showcaseRegex: String) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        technologies\n        date\n        website\n        mainColor\n        previewImage {\n          childImageSharp {\n            fluid(maxWidth: 800, maxHeight: 450) {\n              ...GatsbyImageSharpFluid\n              ...GatsbyImageSharpFluidLimitPresentationSize\n            }\n          }\n        }\n      }\n    }\n    allFile(\n      filter: {\n        absolutePath: { regex: $showcaseRegex }\n        extension: { regex: \"/(jpg)|(png)|(jpeg)/\" }\n      }\n      sort: { order: ASC, fields: name }\n    ) {\n      totalCount\n      edges {\n        node {\n          base\n          childImageSharp {\n            fluid(maxWidth: 800, maxHeight: 450) {\n              ...GatsbyImageSharpFluid\n              ...GatsbyImageSharpFluidLimitPresentationSize\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}